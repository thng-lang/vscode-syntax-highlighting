{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "thng-lang",
  "scopeName": "source.thng",
  "patterns": [
    {
      "include": "#root"
    }
  ],
  "repository": {
    "root": {
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#keywords"
        },
        {
          "include": "#types"
        },
        {
          "include": "#builtins"
        },
        {
          "include": "#operators"
        },
        {
          "include": "#strings"
        },
        {
          "include": "#statements"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.thng",
          "begin": "(//)",
          "beginCaptures": [
            {
              "name": "punctuation.definition.comment.thng"
            }
          ],
          "end": "(?:\n|$)"
        },
        {
          "name": "comment.line.double-slash.thng",
          "begin": "(\\#)",
          "beginCaptures": [
            {
              "name": "punctuation.definition.comment.thng"
            }
          ],
          "end": "(?:\\n|$)"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.assignment.thng",
          "match": "\\b(assn|assign|stck|stack)\\b"
        },
        {
          "name": "keyword.control.thng",
          "match": "\\b(if|else|other|loop|res)"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.arithmetic.thng",
          "match": "(\\+|\\-|\\*|/|%)"
        },
        {
          "name": "keyword.operator.binary.thng",
          "match": "(&(?!\\^)|\\||\\^|&\\^|<<|>>)"
        },
        {
          "name": "keyword.operator.comparison.thng",
          "match": "(=|>=|<=|<|>)"
        },
        {
          "name": "keyword.operator.logical.thng",
          "match": "(or|and|!)"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.thng",
          "begin": "\"",
          "beginCaptures": [
            {
              "name": "punctuation.definition.string.begin.thng"
            }
          ],
          "end": "(\"|\\n|$)",
          "endCaptures": [
            {
              "name": "punctuation.definition.string.end.thng"
            }
          ]
        },
        {
          "name": "string.quoted.single.thng",
          "begin": "'",
          "beginCaptures": [
            {
              "name": "punctuation.definition.string.begin.thng"
            }
          ],
          "end": "'",
          "endCaptures": [
            {
              "name": "punctuation.definition.string.end.thng"
            }
          ]
        }
      ]
    },
    "statements": {
      "patterns": [
        {
          "comment": "This is a assignment operation.",
          "match": "((([a-zA-Z]|_)+)\\s?(:))",
          "captures": {
            "0": {
              "name": "variable.other.assignment.thng"
            },
            "4": {
              "name": "keyword.assignment.thng"
            }
          }
        },
        {
          "match": "(fn)(?:\\s?(([a-zA-Z](?:[0-9]?|_))+))(?:\\s?\\(((\\w+|\\s|,)+)?\\))",
          "captures": {
            "1": {
              "name": "keyword.function.thng"
            },
            "2": {
              "name": "entity.name.function.thng"
            },
            "4": {
              "name": "meta.function.args.thng",
              "patterns": [
                {
                  "include": "#fnparams"
                }
              ]
            }
          }
        },
        {
          "match": "(([a-zA-Z]|_|[0-9])+)(:?\\s?\\((([a-zA-z0-9]|_|\\s|,)+))\\)",
          "captures": {
            "1": {
              "name": "entity.name.function"
            },
            "4": {
              "name": "meta.function.call.params"
            }
          }
        }
      ]
    },
    "fnparams": {
      "patterns": [
        {
          "match": "(([a-zA-Z]|_|[0-9])+)(:?\\s([a-zA-Z]|_|[0-9])+)(,)?",
          "captures": {
            "1": {
              "name": "meta.function.argument.thng",
              "patterns": [
                {
                  "include": "#builtins"
                },
                {
                  "match": "(([a-zA-Z]|_)+)",
                  "name": "support.other.type.thng"
                }
              ]
            },
            "3": {
              "name": "entity.name.paramater.thng"
            }
          }
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "match": "<(([a-zA-Z]|_)+)>",
          "captures": {
            "1": {
              "name": "entity.name.meta.type.thng",
              "patterns": [
                {
                  "include": "#builtins"
                }
              ]
            }
          }
        }
      ]
    },
    "builtins": {
      "patterns": [
        {
          "name": "support.primitive.thng",
          "match": "(((u|i)(8|16|32|64|128))|(f(32|64)))"
        },
        {
          "match": "([0-9](?:.))",
          "name": "constant.numeric.decimal.thng"
        },
        {
          "name": "support.primitive.thng",
          "match": "(bool|string|bytes|dword|word|ptr|addr)"
        }
      ]
    }
  }
}
